{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_entranceFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Lottery__NOT_OPENED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__notEnougETHSend",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "LotteryEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestLotteryWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recentWinner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbad78a5a41e7bebce8f22b8f41c9dd4685adea3ac6434607ef0c88edc3819574",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1174245",
    "logsBloom": "0x
    "blockHash": "0x0f05da1b1a8fc33d2ec53fa0fa382964b289ac9408390dd489ab120c6901154f",
    "transactionHash": "0xbad78a5a41e7bebce8f22b8f41c9dd4685adea3ac6434607ef0c88edc3819574",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1174245",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "1",
    "500000",
    "30",
    "10000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "bba5083f77b6035ff12b58eefbf0bc9c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_entranceFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lottery__NOT_OPENED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__notEnougETHSend\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"LotteryEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestLotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recentWinner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that Chainlink Keeper nodes call they look for the `upkeepNeeded` to return true. 1. The time interval passes between lottery runs 2. Lottery is open 3. The contract has ETH 4. Impicity, your subscribtion is funded with LINK\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xac76a31c20c6d66196247376d113a0f19229569ab8c123989649d50be3333e0a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-Liense-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\r\\n\\r\\nerror Lottery__NOT_OPENED();\\r\\nerror Lottery__notEnougETHSend();\\r\\nerror Lottery__UpkeepNotNeeded();\\r\\nerror Lottery__TransferFailed();\\r\\n\\r\\ncontract Lottery is VRFConsumerBaseV2, KeeperCompatibleInterface {\\r\\n    enum LotteryState {\\r\\n        OPEN,\\r\\n        CALCULATING\\r\\n    }\\r\\n\\r\\n    event LotteryEnter(address indexed player);\\r\\n    event RequestLotteryWinner(uint256 indexed requestId);\\r\\n    event WinnerPicked(address indexed recentWinner);\\r\\n\\r\\n    // Chainlink variables\\r\\n\\r\\n    VRFCoordinatorV2Interface private immutable vrfCoordinator;\\r\\n    bytes32 private immutable gasLane;\\r\\n    uint64 private immutable subscribtionId;\\r\\n    uint32 private immutable callbackGasLimit;\\r\\n    uint32 private constant NUM_WORDS = 1;\\r\\n    uint16 private constant REUQEST_CONFIRMATION = 3;\\r\\n\\r\\n    // Lottery variables\\r\\n\\r\\n    uint256 public entranceFee;\\r\\n    address payable[] public players;\\r\\n    address public recentWinner;\\r\\n    LotteryState public lotteryState;\\r\\n    uint256 public lastTimestamp;\\r\\n    uint256 public interval;\\r\\n\\r\\n    constructor(\\r\\n        address vrfCoordinatorV2,\\r\\n        bytes32 _gasLane,\\r\\n        uint64 _subscriptionId,\\r\\n        uint32 _callbackGasLimit,\\r\\n        uint256 _interval,\\r\\n        uint256 _entranceFee\\r\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\r\\n        vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\r\\n        gasLane = _gasLane;\\r\\n        subscribtionId = _subscriptionId;\\r\\n        callbackGasLimit = _callbackGasLimit;\\r\\n        lotteryState = LotteryState.OPEN;\\r\\n        lastTimestamp = block.timestamp;\\r\\n        interval = _interval;\\r\\n        entranceFee = _entranceFee;\\r\\n    }\\r\\n\\r\\n    function enterLottery() public payable {\\r\\n        if (lotteryState != LotteryState.OPEN) {\\r\\n            revert Lottery__NOT_OPENED();\\r\\n        }\\r\\n        if (msg.value < entranceFee) {\\r\\n            revert Lottery__notEnougETHSend();\\r\\n        }\\r\\n        players.push(payable(msg.sender));\\r\\n        emit LotteryEnter(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This is the function that Chainlink Keeper nodes call\\r\\n     * they look for the `upkeepNeeded` to return true.\\r\\n     * 1. The time interval passes between lottery runs\\r\\n     * 2. Lottery is open\\r\\n     * 3. The contract has ETH\\r\\n     * 4. Impicity, your subscribtion is funded with LINK\\r\\n     */\\r\\n\\r\\n    function checkUpkeep(bytes memory /* checkData */) public override  returns (bool upkeepNeeded, bytes memory /* performData */) {\\r\\n        bool isOpen = (LotteryState.OPEN == lotteryState);\\r\\n        bool timePasses = ((block.timestamp - lastTimestamp) > interval);\\r\\n        bool hasPlayers = players.length > 0;\\r\\n        bool hasBalance = address(this).balance > 0;\\r\\n        upkeepNeeded = (isOpen && timePasses && hasPlayers && hasBalance);\\r\\n    }\\r\\n\\r\\n    function performUpkeep(bytes calldata /* performData */) external override {\\r\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n        if (!upkeepNeeded) {\\r\\n            revert Lottery__UpkeepNotNeeded();\\r\\n        }\\r\\n\\r\\n        lotteryState = LotteryState.CALCULATING;\\r\\n        uint256 requestId = vrfCoordinator.requestRandomWords(\\r\\n            gasLane,\\r\\n            subscribtionId,\\r\\n            REUQEST_CONFIRMATION,\\r\\n            callbackGasLimit,\\r\\n            NUM_WORDS\\r\\n        );\\r\\n        emit RequestLotteryWinner(requestId);\\r\\n    }\\r\\n\\r\\n  \\r\\n    function fulfillRandomWords(\\r\\n        uint256 /* requestId */,\\r\\n        uint256[] memory randWords\\r\\n    ) internal override {\\r\\n        uint256 indexOfWinner = randWords[0] % players.length;\\r\\n        address payable _recentWinner = players[indexOfWinner];\\r\\n        recentWinner = _recentWinner;\\r\\n        players = new address payable[](0);\\r\\n        lotteryState = LotteryState.OPEN;\\r\\n        lastTimestamp = block.timestamp;\\r\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert Lottery__TransferFailed();\\r\\n        }\\r\\n\\r\\n        emit WinnerPicked(_recentWinner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd279e8a396eecdd9b3b913767b160b5f0064053acd3576f04d52409ac298874d\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162001698380380620016988339818101604052810190620000389190620001a9565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508460c081815250508367ffffffffffffffff1660e08167ffffffffffffffff1660c01b815250508263ffffffff166101008163ffffffff1660e01b815250506000600260146101000a81548160ff0219169083600181111562000110576200010f620002b1565b5b021790555042600381905550816004819055508060008190555050505050505062000367565b6000815190506200014781620002e5565b92915050565b6000815190506200015e81620002ff565b92915050565b600081519050620001758162000319565b92915050565b6000815190506200018c8162000333565b92915050565b600081519050620001a3816200034d565b92915050565b60008060008060008060c08789031215620001c957620001c8620002e0565b5b6000620001d989828a0162000136565b9650506020620001ec89828a016200014d565b9550506040620001ff89828a0162000192565b94505060606200021289828a016200017b565b93505060806200022589828a0162000164565b92505060a06200023889828a0162000164565b9150509295509295509295565b6000620002528262000263565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002f08162000245565b8114620002fc57600080fd5b50565b6200030a8162000259565b81146200031657600080fd5b50565b620003248162000283565b81146200033057600080fd5b50565b6200033e816200028d565b81146200034a57600080fd5b50565b62000358816200029d565b81146200036457600080fd5b50565b60805160601c60a05160601c60c05160e05160c01c6101005160e01c6112d9620003bf600039600061040d015260006103ea015260006103c90152600061038d01526000818161024c01526102a001526112d96000f3fe6080604052600436106100915760003560e01c80636939864b116100595780636939864b146101695780636e04ff0d14610194578063947a36fb146101d2578063c1af5785146101fd578063f71d96cb1461020757610091565b806319d8ac61146100965780631fe543e3146100c15780634585e33b146100ea5780634f8c70cf14610113578063649677e11461013e575b600080fd5b3480156100a257600080fd5b506100ab610244565b6040516100b89190610f04565b60405180910390f35b3480156100cd57600080fd5b506100e860048036038101906100e39190610cb3565b61024a565b005b3480156100f657600080fd5b50610111600480360381019061010c9190610bc3565b61030a565b005b34801561011f57600080fd5b506101286104d5565b6040516101359190610e07565b60405180910390f35b34801561014a57600080fd5b506101536104fb565b6040516101609190610f04565b60405180910390f35b34801561017557600080fd5b5061017e610501565b60405161018b9190610ee9565b60405180910390f35b3480156101a057600080fd5b506101bb60048036038101906101b69190610c10565b610514565b6040516101c9929190610e66565b60405180910390f35b3480156101de57600080fd5b506101e76105a3565b6040516101f49190610f04565b60405180910390f35b6102056105a9565b005b34801561021357600080fd5b5061022e60048036038101906102299190610c59565b6106fa565b60405161023b9190610e22565b60405180910390f35b60035481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102fc57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016102f3929190610e3d565b60405180910390fd5b6103068282610739565b5050565b600061032460405180602001604052806000815250610514565b5090508061035e576040517f35ae29b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600260146101000a81548160ff02191690836001811115610384576103836111b9565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161044e959493929190610e96565b602060405180830381600087803b15801561046857600080fd5b505af115801561047c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a09190610c86565b9050807feddaba8a57dcfd3a637ac76edea7af81443028e0bd6e6cb23bd210a4a85ba85660405160405180910390a250505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b600260149054906101000a900460ff1681565b600060606000600260149054906101000a900460ff16600181111561053c5761053b6111b9565b5b600060018111156105505761054f6111b9565b5b1490506000600454600354426105669190610fc8565b119050600080600180549050119050600080471190508380156105865750825b801561058f5750815b80156105985750805b955050505050915091565b60045481565b600060018111156105bd576105bc6111b9565b5b600260149054906101000a900460ff1660018111156105df576105de6111b9565b5b14610616576040517f3768711d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600054341015610652576040517fc308455f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b6001818154811061070a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060018054905082600081518110610755576107546111e8565b5b6020026020010151610767919061112a565b905060006001828154811061077f5761077e6111e8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff81111561080857610807611217565b5b6040519080825280602002602001820160405280156108365781602001602082028036833780820191505090505b506001908051906020019061084c92919061098e565b506000600260146101000a81548160ff02191690836001811115610873576108726111b9565b5b0217905550426003819055506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16476040516108c790610df2565b60006040518083038185875af1925050503d8060008114610904576040519150601f19603f3d011682016040523d82523d6000602084013e610909565b606091505b5050905080610944576040517f1c94012000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610a07579160200282015b82811115610a065782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109ae565b5b509050610a149190610a18565b5090565b5b80821115610a31576000816000905550600101610a19565b5090565b6000610a48610a4384610f44565b610f1f565b90508083825260208201905082856020860282011115610a6b57610a6a611250565b5b60005b85811015610a9b5781610a818882610b99565b845260208401935060208301925050600181019050610a6e565b5050509392505050565b6000610ab8610ab384610f70565b610f1f565b905082815260208101848484011115610ad457610ad3611255565b5b610adf8482856110b7565b509392505050565b600082601f830112610afc57610afb61124b565b5b8135610b0c848260208601610a35565b91505092915050565b60008083601f840112610b2b57610b2a61124b565b5b8235905067ffffffffffffffff811115610b4857610b47611246565b5b602083019150836001820283011115610b6457610b63611250565b5b9250929050565b600082601f830112610b8057610b7f61124b565b5b8135610b90848260208601610aa5565b91505092915050565b600081359050610ba88161128c565b92915050565b600081519050610bbd8161128c565b92915050565b60008060208385031215610bda57610bd961125f565b5b600083013567ffffffffffffffff811115610bf857610bf761125a565b5b610c0485828601610b15565b92509250509250929050565b600060208284031215610c2657610c2561125f565b5b600082013567ffffffffffffffff811115610c4457610c4361125a565b5b610c5084828501610b6b565b91505092915050565b600060208284031215610c6f57610c6e61125f565b5b6000610c7d84828501610b99565b91505092915050565b600060208284031215610c9c57610c9b61125f565b5b6000610caa84828501610bae565b91505092915050565b60008060408385031215610cca57610cc961125f565b5b6000610cd885828601610b99565b925050602083013567ffffffffffffffff811115610cf957610cf861125a565b5b610d0585828601610ae7565b9150509250929050565b610d188161100e565b82525050565b610d2781610ffc565b82525050565b610d3681611020565b82525050565b610d458161102c565b82525050565b6000610d5682610fa1565b610d608185610fac565b9350610d708185602086016110c6565b610d7981611264565b840191505092915050565b610d8d816110a5565b82525050565b6000610da0600083610fbd565b9150610dab82611275565b600082019050919050565b610dbf81611049565b82525050565b610dce81611077565b82525050565b610ddd81611081565b82525050565b610dec81611091565b82525050565b6000610dfd82610d93565b9150819050919050565b6000602082019050610e1c6000830184610d1e565b92915050565b6000602082019050610e376000830184610d0f565b92915050565b6000604082019050610e526000830185610d1e565b610e5f6020830184610d1e565b9392505050565b6000604082019050610e7b6000830185610d2d565b8181036020830152610e8d8184610d4b565b90509392505050565b600060a082019050610eab6000830188610d3c565b610eb86020830187610de3565b610ec56040830186610db6565b610ed26060830185610dd4565b610edf6080830184610dd4565b9695505050505050565b6000602082019050610efe6000830184610d84565b92915050565b6000602082019050610f196000830184610dc5565b92915050565b6000610f29610f3a565b9050610f3582826110f9565b919050565b6000604051905090565b600067ffffffffffffffff821115610f5f57610f5e611217565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610f8b57610f8a611217565b5b610f9482611264565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000610fd382611077565b9150610fde83611077565b925082821015610ff157610ff061115b565b5b828203905092915050565b600061100782611057565b9050919050565b600061101982611057565b9050919050565b60008115159050919050565b6000819050919050565b600081905061104482611278565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006110b082611036565b9050919050565b82818337600083830152505050565b60005b838110156110e45780820151818401526020810190506110c9565b838111156110f3576000848401525b50505050565b61110282611264565b810181811067ffffffffffffffff8211171561112157611120611217565b5b80604052505050565b600061113582611077565b915061114083611077565b9250826111505761114f61118a565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b60028110611289576112886111b9565b5b50565b61129581611077565b81146112a057600080fd5b5056fea2646970667358221220666325151ea4efcfc4cd06d8288f3fa4ed3d5ca25225621cf970a1e48ccc22e564736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c80636939864b116100595780636939864b146101695780636e04ff0d14610194578063947a36fb146101d2578063c1af5785146101fd578063f71d96cb1461020757610091565b806319d8ac61146100965780631fe543e3146100c15780634585e33b146100ea5780634f8c70cf14610113578063649677e11461013e575b600080fd5b3480156100a257600080fd5b506100ab610244565b6040516100b89190610f04565b60405180910390f35b3480156100cd57600080fd5b506100e860048036038101906100e39190610cb3565b61024a565b005b3480156100f657600080fd5b50610111600480360381019061010c9190610bc3565b61030a565b005b34801561011f57600080fd5b506101286104d5565b6040516101359190610e07565b60405180910390f35b34801561014a57600080fd5b506101536104fb565b6040516101609190610f04565b60405180910390f35b34801561017557600080fd5b5061017e610501565b60405161018b9190610ee9565b60405180910390f35b3480156101a057600080fd5b506101bb60048036038101906101b69190610c10565b610514565b6040516101c9929190610e66565b60405180910390f35b3480156101de57600080fd5b506101e76105a3565b6040516101f49190610f04565b60405180910390f35b6102056105a9565b005b34801561021357600080fd5b5061022e60048036038101906102299190610c59565b6106fa565b60405161023b9190610e22565b60405180910390f35b60035481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102fc57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016102f3929190610e3d565b60405180910390fd5b6103068282610739565b5050565b600061032460405180602001604052806000815250610514565b5090508061035e576040517f35ae29b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600260146101000a81548160ff02191690836001811115610384576103836111b9565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161044e959493929190610e96565b602060405180830381600087803b15801561046857600080fd5b505af115801561047c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a09190610c86565b9050807feddaba8a57dcfd3a637ac76edea7af81443028e0bd6e6cb23bd210a4a85ba85660405160405180910390a250505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b600260149054906101000a900460ff1681565b600060606000600260149054906101000a900460ff16600181111561053c5761053b6111b9565b5b600060018111156105505761054f6111b9565b5b1490506000600454600354426105669190610fc8565b119050600080600180549050119050600080471190508380156105865750825b801561058f5750815b80156105985750805b955050505050915091565b60045481565b600060018111156105bd576105bc6111b9565b5b600260149054906101000a900460ff1660018111156105df576105de6111b9565b5b14610616576040517f3768711d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600054341015610652576040517fc308455f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b6001818154811061070a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060018054905082600081518110610755576107546111e8565b5b6020026020010151610767919061112a565b905060006001828154811061077f5761077e6111e8565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff81111561080857610807611217565b5b6040519080825280602002602001820160405280156108365781602001602082028036833780820191505090505b506001908051906020019061084c92919061098e565b506000600260146101000a81548160ff02191690836001811115610873576108726111b9565b5b0217905550426003819055506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16476040516108c790610df2565b60006040518083038185875af1925050503d8060008114610904576040519150601f19603f3d011682016040523d82523d6000602084013e610909565b606091505b5050905080610944576040517f1c94012000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610a07579160200282015b82811115610a065782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109ae565b5b509050610a149190610a18565b5090565b5b80821115610a31576000816000905550600101610a19565b5090565b6000610a48610a4384610f44565b610f1f565b90508083825260208201905082856020860282011115610a6b57610a6a611250565b5b60005b85811015610a9b5781610a818882610b99565b845260208401935060208301925050600181019050610a6e565b5050509392505050565b6000610ab8610ab384610f70565b610f1f565b905082815260208101848484011115610ad457610ad3611255565b5b610adf8482856110b7565b509392505050565b600082601f830112610afc57610afb61124b565b5b8135610b0c848260208601610a35565b91505092915050565b60008083601f840112610b2b57610b2a61124b565b5b8235905067ffffffffffffffff811115610b4857610b47611246565b5b602083019150836001820283011115610b6457610b63611250565b5b9250929050565b600082601f830112610b8057610b7f61124b565b5b8135610b90848260208601610aa5565b91505092915050565b600081359050610ba88161128c565b92915050565b600081519050610bbd8161128c565b92915050565b60008060208385031215610bda57610bd961125f565b5b600083013567ffffffffffffffff811115610bf857610bf761125a565b5b610c0485828601610b15565b92509250509250929050565b600060208284031215610c2657610c2561125f565b5b600082013567ffffffffffffffff811115610c4457610c4361125a565b5b610c5084828501610b6b565b91505092915050565b600060208284031215610c6f57610c6e61125f565b5b6000610c7d84828501610b99565b91505092915050565b600060208284031215610c9c57610c9b61125f565b5b6000610caa84828501610bae565b91505092915050565b60008060408385031215610cca57610cc961125f565b5b6000610cd885828601610b99565b925050602083013567ffffffffffffffff811115610cf957610cf861125a565b5b610d0585828601610ae7565b9150509250929050565b610d188161100e565b82525050565b610d2781610ffc565b82525050565b610d3681611020565b82525050565b610d458161102c565b82525050565b6000610d5682610fa1565b610d608185610fac565b9350610d708185602086016110c6565b610d7981611264565b840191505092915050565b610d8d816110a5565b82525050565b6000610da0600083610fbd565b9150610dab82611275565b600082019050919050565b610dbf81611049565b82525050565b610dce81611077565b82525050565b610ddd81611081565b82525050565b610dec81611091565b82525050565b6000610dfd82610d93565b9150819050919050565b6000602082019050610e1c6000830184610d1e565b92915050565b6000602082019050610e376000830184610d0f565b92915050565b6000604082019050610e526000830185610d1e565b610e5f6020830184610d1e565b9392505050565b6000604082019050610e7b6000830185610d2d565b8181036020830152610e8d8184610d4b565b90509392505050565b600060a082019050610eab6000830188610d3c565b610eb86020830187610de3565b610ec56040830186610db6565b610ed26060830185610dd4565b610edf6080830184610dd4565b9695505050505050565b6000602082019050610efe6000830184610d84565b92915050565b6000602082019050610f196000830184610dc5565b92915050565b6000610f29610f3a565b9050610f3582826110f9565b919050565b6000604051905090565b600067ffffffffffffffff821115610f5f57610f5e611217565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610f8b57610f8a611217565b5b610f9482611264565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000610fd382611077565b9150610fde83611077565b925082821015610ff157610ff061115b565b5b828203905092915050565b600061100782611057565b9050919050565b600061101982611057565b9050919050565b60008115159050919050565b6000819050919050565b600081905061104482611278565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006110b082611036565b9050919050565b82818337600083830152505050565b60005b838110156110e45780820151818401526020810190506110c9565b838111156110f3576000848401525b50505050565b61110282611264565b810181811067ffffffffffffffff8211171561112157611120611217565b5b80604052505050565b600061113582611077565b915061114083611077565b9250826111505761114f61118a565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b60028110611289576112886111b9565b5b50565b61129581611077565b81146112a057600080fd5b5056fea2646970667358221220666325151ea4efcfc4cd06d8288f3fa4ed3d5ca25225621cf970a1e48ccc22e564736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that Chainlink Keeper nodes call they look for the `upkeepNeeded` to return true. 1. The time interval passes between lottery runs 2. Lottery is open 3. The contract has ETH 4. Impicity, your subscribtion is funded with LINK"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1183,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "entranceFee",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1186,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "players",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1188,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "recentWinner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1191,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lotteryState",
        "offset": 20,
        "slot": "2",
        "type": "t_enum(LotteryState)1154"
      },
      {
        "astId": 1193,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lastTimestamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1195,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "interval",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)1154": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}